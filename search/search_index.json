{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zolusca Documentation Project This is my documentation for my project, all my project documentation on this site. Im newly on programming, so maybe my documentation or my project is not perfect or good. The last point of all my project is my training for programming.","title":"Whats is this"},{"location":"#zolusca-documentation-project","text":"This is my documentation for my project, all my project documentation on this site. Im newly on programming, so maybe my documentation or my project is not perfect or good. The last point of all my project is my training for programming.","title":"Zolusca Documentation Project"},{"location":"licensevalidate/api/","text":"List Path Api 'license/create' method: get mendapatkan License key format response json {\"message\":\"sukses\",\"statusResponse\":\"OK\",\"data\":null} 'license/find' method: Post Mencari License key format request json {'license':'licensekey'} format response json {\"message\":\"pesan\",\"statusResponse\":\"http status\",\"data\":{ 'licenseKey':'licenseKey data', 'status':'status licenseKey' }} 'license/activated' method: Post Aktivasi License key format request json {'license':'licensekey'} format response json {\"message\":\"pesan\",\"statusResponse\":\"http status\",\"data\":{ 'licenseKey':'licenseKey data', 'status':'status licenseKey' }}","title":"Api Documentation"},{"location":"licensevalidate/api/#list-path-api","text":"'license/create' method: get mendapatkan License key format response json {\"message\":\"sukses\",\"statusResponse\":\"OK\",\"data\":null} 'license/find' method: Post Mencari License key format request json {'license':'licensekey'} format response json {\"message\":\"pesan\",\"statusResponse\":\"http status\",\"data\":{ 'licenseKey':'licenseKey data', 'status':'status licenseKey' }} 'license/activated' method: Post Aktivasi License key format request json {'license':'licensekey'} format response json {\"message\":\"pesan\",\"statusResponse\":\"http status\",\"data\":{ 'licenseKey':'licenseKey data', 'status':'status licenseKey' }}","title":"List Path Api"},{"location":"licensevalidate/architecture/","text":"The Architecture Saya tidak terlalu bisa membuat arsitektur flow diagram. Client Side Server Side","title":"Architecture"},{"location":"licensevalidate/architecture/#the-architecture","text":"Saya tidak terlalu bisa membuat arsitektur flow diagram.","title":"The Architecture"},{"location":"licensevalidate/architecture/#client-side","text":"","title":"Client Side"},{"location":"licensevalidate/architecture/#server-side","text":"","title":"Server Side"},{"location":"licensevalidate/install/","text":"Tahap Pengunaan Alat/Tools Yang Perlu Dipersiapkan Java JDK versi 17 atau versi yang mendukung javafx Build Tools Maven versi 3+ Database Mysql Set Up Kebutuhan Buat database dan gunakan query dibawah ini create database licensedata CREATE TABLE `license` ( `id` varchar(40) NOT NULL, `licensekey` varchar(15) DEFAULT NULL, `status` enum('AKTIF','MATI') DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `licensekey` (`licensekey`), KEY `licensekey_index` (`licensekey`) ) ENGINE=InnoDB Konfigurasi database pada ConfigurationPack.java (ada pada server side) ubah username dan password sesuai yang anda miliki, untuk koneksi ke database. Install dependency dengan maven mvn install Mulai server side service , dengan perintah ./mvnw spring-boot:run Lakukan request, untuk membuat data license pada database Path Api list Running Javafx client Software, Dan coba untuk menginput license yang telah ada pada database","title":"Tahap Penggunaan"},{"location":"licensevalidate/install/#tahap-pengunaan","text":"","title":"Tahap Pengunaan"},{"location":"licensevalidate/install/#alattools-yang-perlu-dipersiapkan","text":"Java JDK versi 17 atau versi yang mendukung javafx Build Tools Maven versi 3+ Database Mysql","title":"Alat/Tools Yang Perlu Dipersiapkan"},{"location":"licensevalidate/install/#set-up-kebutuhan","text":"Buat database dan gunakan query dibawah ini create database licensedata CREATE TABLE `license` ( `id` varchar(40) NOT NULL, `licensekey` varchar(15) DEFAULT NULL, `status` enum('AKTIF','MATI') DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `licensekey` (`licensekey`), KEY `licensekey_index` (`licensekey`) ) ENGINE=InnoDB Konfigurasi database pada ConfigurationPack.java (ada pada server side) ubah username dan password sesuai yang anda miliki, untuk koneksi ke database. Install dependency dengan maven mvn install Mulai server side service , dengan perintah ./mvnw spring-boot:run Lakukan request, untuk membuat data license pada database Path Api list Running Javafx client Software, Dan coba untuk menginput license yang telah ada pada database","title":"Set Up Kebutuhan"},{"location":"licensevalidate/licensevalidate/","text":"Apa Itu License Validate Aplikasi ini merupakan sebuah program yang memvalidasi licensi dari inputan pengguna (software desktop). Dimana aplikasi ini ditunjukkan untuk latihan saya sebagi pembuat untuk mempraktikkan, secara sederhana bagaimana aplikasi seperti Adobe, Corel Draw dan sebagainya bekerja dalam hal aktivasi licensi. Project ini terdiri dari 2 bagian yakni : 1. License validate server ini merupakan server web untuk memvalidasi request, mengenerate license key. dibuat dengan java springboot web, dan transferring data menggunakan json format. Link : license validate server 2. License validate client (desktop) ini merupakan aplikasi yang mengambil data input dari user dan mengirimkan ke server, ini menggunakan javafx. Link : license validate client Tujuan Aplikasi Tujuan aplikasi ini adalah untuk melatih saya sebagai pembuat dalam hal pembuatan program dengan bahasa pemrograman java.","title":"License Validate"},{"location":"licensevalidate/licensevalidate/#apa-itu-license-validate","text":"Aplikasi ini merupakan sebuah program yang memvalidasi licensi dari inputan pengguna (software desktop). Dimana aplikasi ini ditunjukkan untuk latihan saya sebagi pembuat untuk mempraktikkan, secara sederhana bagaimana aplikasi seperti Adobe, Corel Draw dan sebagainya bekerja dalam hal aktivasi licensi. Project ini terdiri dari 2 bagian yakni :","title":"Apa Itu License Validate"},{"location":"licensevalidate/licensevalidate/#1-license-validate-server","text":"ini merupakan server web untuk memvalidasi request, mengenerate license key. dibuat dengan java springboot web, dan transferring data menggunakan json format. Link : license validate server","title":"1. License validate server"},{"location":"licensevalidate/licensevalidate/#2-license-validate-client-desktop","text":"ini merupakan aplikasi yang mengambil data input dari user dan mengirimkan ke server, ini menggunakan javafx. Link : license validate client","title":"2. License validate client (desktop)"},{"location":"licensevalidate/licensevalidate/#tujuan-aplikasi","text":"Tujuan aplikasi ini adalah untuk melatih saya sebagai pembuat dalam hal pembuatan program dengan bahasa pemrograman java.","title":"Tujuan Aplikasi"},{"location":"perpustakaan/install/","text":"Tahap Penggunaan Alat/Tools yang perlu dipersiapkan PHP versi 8.1> (yang mendukung enum, jika dibawahnya ada yang perlu di ubah) Composer v.2.5+ MySql Database Setup Kebutuhan Install dependeny yang dibutuhkan (phpunit dan monolog), terpenting adalah monolog untuk logger. silahkan setting pada composer.json untuk menghapus phpunit composer install Setup database dengan sql yang ada di project 'perpustakaanSchemaDatabase.sql' Setup nama dan password database kalian pada 'App/Config/Database.php' pada array default dan jika kalian ingin menjalankan test setting juga pada array test pada file yang sama gunakan dibawah untuk menjalankan seeder, sebagai data dummy pada database (app/database/seeds) php spark db:seed DummyData Jalankan perintah php spark serve","title":"Tahap Penggunaan"},{"location":"perpustakaan/install/#tahap-penggunaan","text":"","title":"Tahap Penggunaan"},{"location":"perpustakaan/install/#alattools-yang-perlu-dipersiapkan","text":"PHP versi 8.1> (yang mendukung enum, jika dibawahnya ada yang perlu di ubah) Composer v.2.5+ MySql Database","title":"Alat/Tools yang perlu dipersiapkan"},{"location":"perpustakaan/install/#setup-kebutuhan","text":"Install dependeny yang dibutuhkan (phpunit dan monolog), terpenting adalah monolog untuk logger. silahkan setting pada composer.json untuk menghapus phpunit composer install Setup database dengan sql yang ada di project 'perpustakaanSchemaDatabase.sql' Setup nama dan password database kalian pada 'App/Config/Database.php' pada array default dan jika kalian ingin menjalankan test setting juga pada array test pada file yang sama gunakan dibawah untuk menjalankan seeder, sebagai data dummy pada database (app/database/seeds) php spark db:seed DummyData Jalankan perintah php spark serve","title":"Setup Kebutuhan"},{"location":"perpustakaan/modeldanentity/","text":"Model dan Entity Documentation 1. Model Setiap model memiliki method yang berbeda-beda, misalnya model A memiliki method getAllData tetapi model B tidak memiliki method tersebut. Saya telah memberikan gambaran singkat terkait method atau kode yang ada, namun beberapa masih belum saya selesaikan. Pastikan selalu melempar exception saat menggunakan method, terutama jika method tersebut memiliki exception. Ada dua jenis exception: Validation Exception : terkait validasi yang ada pada model. Custom Exception : seperti DatabaseExceptionNotFound . Setiap data yang diambil dari model akan berbentuk entity model tersebut (contoh: UserModel akan menghasilkan UserEntity ). Anda dapat mengakses data yang telah diambil menggunakan attributes atau datamap yang ada pada entity. Untuk data yang dikembalikan dalam bentuk array, biasanya disajikan sebagai array of object. Sebagai contoh, jika Anda menemukan query findAll yang mengembalikan array data, Anda tetap dapat menggunakan attributes atau datamap entity. Contoh penggunaan: $result = $this->where(\"email\", $email)->find(); // Anda dapat menggunakan $result->nama // untuk mendapatkan nilai nama Setiap model dilengkapi dengan log debug, error, dan info untuk memudahkan pengembang. Tips untuk membuat method query baru: Gunakan logger dan hanya berinteraksi dengan query tersebut. Anda dapat menggunakan PHPUnit untuk pengujian atau langsung menampilkan output ke web. Periksa log yang ada untuk membantu memeriksa error. Rapihkan dokumentasi ini. 2. Entity setiap entity memiliki method createObject ini digunakan untuk membuat object yang akan di insert ke model, jadi gunakan selalu ini untuk inserting data. Dan pada Entity terdapat method to string ini digunakan untuk mempermudah jika kita ingin melihat data yang ada pada object. Anda bisa menggunakan echo nama object . Pada datamap digunakan jika kalian tidak suka dengan penggunaan attributes yang mana ini sama seperti nama field pada database, jika database field bernama jumlah_data_yang_ditarik maka anda bisa mengubah itu pada datamap menjadi jmlhdataditarik dsb.","title":"Model Dan Entity"},{"location":"perpustakaan/modeldanentity/#model-dan-entity-documentation","text":"","title":"Model dan Entity Documentation"},{"location":"perpustakaan/modeldanentity/#1-model","text":"Setiap model memiliki method yang berbeda-beda, misalnya model A memiliki method getAllData tetapi model B tidak memiliki method tersebut. Saya telah memberikan gambaran singkat terkait method atau kode yang ada, namun beberapa masih belum saya selesaikan. Pastikan selalu melempar exception saat menggunakan method, terutama jika method tersebut memiliki exception. Ada dua jenis exception: Validation Exception : terkait validasi yang ada pada model. Custom Exception : seperti DatabaseExceptionNotFound . Setiap data yang diambil dari model akan berbentuk entity model tersebut (contoh: UserModel akan menghasilkan UserEntity ). Anda dapat mengakses data yang telah diambil menggunakan attributes atau datamap yang ada pada entity. Untuk data yang dikembalikan dalam bentuk array, biasanya disajikan sebagai array of object. Sebagai contoh, jika Anda menemukan query findAll yang mengembalikan array data, Anda tetap dapat menggunakan attributes atau datamap entity. Contoh penggunaan: $result = $this->where(\"email\", $email)->find(); // Anda dapat menggunakan $result->nama // untuk mendapatkan nilai nama Setiap model dilengkapi dengan log debug, error, dan info untuk memudahkan pengembang. Tips untuk membuat method query baru: Gunakan logger dan hanya berinteraksi dengan query tersebut. Anda dapat menggunakan PHPUnit untuk pengujian atau langsung menampilkan output ke web. Periksa log yang ada untuk membantu memeriksa error. Rapihkan dokumentasi ini.","title":"1. Model"},{"location":"perpustakaan/modeldanentity/#2-entity","text":"setiap entity memiliki method createObject ini digunakan untuk membuat object yang akan di insert ke model, jadi gunakan selalu ini untuk inserting data. Dan pada Entity terdapat method to string ini digunakan untuk mempermudah jika kita ingin melihat data yang ada pada object. Anda bisa menggunakan echo nama object . Pada datamap digunakan jika kalian tidak suka dengan penggunaan attributes yang mana ini sama seperti nama field pada database, jika database field bernama jumlah_data_yang_ditarik maka anda bisa mengubah itu pada datamap menjadi jmlhdataditarik dsb.","title":"2. Entity"},{"location":"perpustakaan/perpustakaan/","text":"Tentang Proyek -------------------- Tahap Construct ---------------- Proyek ini merupakan bagian dari mata pelajaran web programming 3 di kampus saya, dengan menggunakan CodeIgniter 3 untuk membangun aplikasi perpustakaan. Meskipun rencana pembangunan program ini, termasuk struktur database dan alur cerita, telah disediakan melalui modul web programming 3, namun proyek ini sepenuhnya saya yang membuatnya. Catatan: Program ini belum sepenuhnya selesai dan masih memiliki banyak kekurangan. Yang Belum Terselesaikan: Penanganan ketika pengguna mengembalikan buku pinjaman belum diimplementasikan. Tampilan data pengguna di dashboard admin untuk daftar pengguna belum tersedia. Menu profil pada halaman pengguna belum dikembangkan. Unit testing hanya diimplementasikan pada beberapa model, namun kode unit testing belum dirapihkan. Beberapa query model belum terdokumentasi dengan baik, dan penanganan exception belum lengkap. Pengelolaan file log menggunakan Monolog masih menggunakan satu file saja, yang mungkin akan penuh dan sulit dibaca. Layout templating untuk tata letak tampilan belum terimplementasikan. Alasan Proyek Belum Selesai: Proyek ini belum selesai karena terbatasnya waktu yang saya miliki. Saya juga memiliki proyek tugas akhir yang membutuhkan perhatian penuh. Mohon maaf atas ketidaksempurnaan proyek ini, dan saya akan terus berusaha untuk meningkatkan dan menyelesaikannya seiring berjalannya waktu. Terima kasih atas pemahaman dan dukungan Anda.","title":"Perpustakaan"},{"location":"perpustakaan/perpustakaan/#tentang-proyek","text":"","title":"Tentang Proyek"},{"location":"perpustakaan/perpustakaan/#-tahap-construct-","text":"Proyek ini merupakan bagian dari mata pelajaran web programming 3 di kampus saya, dengan menggunakan CodeIgniter 3 untuk membangun aplikasi perpustakaan. Meskipun rencana pembangunan program ini, termasuk struktur database dan alur cerita, telah disediakan melalui modul web programming 3, namun proyek ini sepenuhnya saya yang membuatnya. Catatan: Program ini belum sepenuhnya selesai dan masih memiliki banyak kekurangan.","title":"-------------------- Tahap Construct  ----------------"},{"location":"perpustakaan/perpustakaan/#yang-belum-terselesaikan","text":"Penanganan ketika pengguna mengembalikan buku pinjaman belum diimplementasikan. Tampilan data pengguna di dashboard admin untuk daftar pengguna belum tersedia. Menu profil pada halaman pengguna belum dikembangkan. Unit testing hanya diimplementasikan pada beberapa model, namun kode unit testing belum dirapihkan. Beberapa query model belum terdokumentasi dengan baik, dan penanganan exception belum lengkap. Pengelolaan file log menggunakan Monolog masih menggunakan satu file saja, yang mungkin akan penuh dan sulit dibaca. Layout templating untuk tata letak tampilan belum terimplementasikan. Alasan Proyek Belum Selesai: Proyek ini belum selesai karena terbatasnya waktu yang saya miliki. Saya juga memiliki proyek tugas akhir yang membutuhkan perhatian penuh. Mohon maaf atas ketidaksempurnaan proyek ini, dan saya akan terus berusaha untuk meningkatkan dan menyelesaikannya seiring berjalannya waktu. Terima kasih atas pemahaman dan dukungan Anda.","title":"Yang Belum Terselesaikan:"},{"location":"perpustakaan/sekilas/","text":"Sekilas Tentang Proyek 1. Logger Logger dalam proyek ini menggunakan Monolog. File log disimpan di direktori 'writable/logApp/'. Saat aplikasi berjalan, semua log ditulis ke dalam satu file. Namun, ada masalah yang belum terselesaikan yaitu bagaimana membuat file log otomatis setiap kali aplikasi berjalan dengan nama file yang berbeda. Anda juga dapat melihat log melalui console. Untuk menonaktifkan output log ke file, Anda perlu mengomentari (//) baris kode berikut di file App/Config/LoggerCreations.php : $logger->pushHandler(new \\Monolog\\Handler\\StreamHandler(WRITEPATH.\"logsApp/logapp.log\")); Jika Anda ingin mengganti log ke log bawaan framework, silakan periksa file 'App/config/logger'. Di sana, output file dari logger framework sudah dinonaktifkan. Pastikan membaca dokumentasi framework untuk cara menggunakan log bawaan. 2. Koneksi Database Koneksi ke database diimplementasikan menggunakan pola singleton yang didefinisikan di Service (config), yang dapat ditemukan di 'App/Config/Services'. Saya tidak yakin apakah pendekatan ini sudah benar atau tidak. Namun, yang ingin dicapai adalah pembuatan koneksi diatur di sana dengan batasan maksimum koneksi. yang saya tahu tidak ada konsep connection pool di php. 3. Enum PHP 8 pada project ini saya menggunakan php versi 8.2 yang mana fitur enum sudah disediakan, disini jika kalian masih menggunakan versi php <8.1 yang tidak memiliki fitur enum. Yang kalian harus lakukan adalah mengganti schema database yang memiliki enum juga ke entity yang bersangkutan. Silahkan ganti dengan '1'=>'admin' misalnya. pada schema user misalnya kalian ganti ke 1 representasi admin dan 2 anggota lalu pergi ke 'app/entity/userEntity' pada createObject method ganti pembuatan attributes dengan value kalian. Dan Jangan lupa hapus file enum pada 'App/Entity/Enum'","title":"Sekilas"},{"location":"perpustakaan/sekilas/#sekilas-tentang-proyek","text":"","title":"Sekilas Tentang Proyek"},{"location":"perpustakaan/sekilas/#1-logger","text":"Logger dalam proyek ini menggunakan Monolog. File log disimpan di direktori 'writable/logApp/'. Saat aplikasi berjalan, semua log ditulis ke dalam satu file. Namun, ada masalah yang belum terselesaikan yaitu bagaimana membuat file log otomatis setiap kali aplikasi berjalan dengan nama file yang berbeda. Anda juga dapat melihat log melalui console. Untuk menonaktifkan output log ke file, Anda perlu mengomentari (//) baris kode berikut di file App/Config/LoggerCreations.php : $logger->pushHandler(new \\Monolog\\Handler\\StreamHandler(WRITEPATH.\"logsApp/logapp.log\")); Jika Anda ingin mengganti log ke log bawaan framework, silakan periksa file 'App/config/logger'. Di sana, output file dari logger framework sudah dinonaktifkan. Pastikan membaca dokumentasi framework untuk cara menggunakan log bawaan.","title":"1. Logger"},{"location":"perpustakaan/sekilas/#2-koneksi-database","text":"Koneksi ke database diimplementasikan menggunakan pola singleton yang didefinisikan di Service (config), yang dapat ditemukan di 'App/Config/Services'. Saya tidak yakin apakah pendekatan ini sudah benar atau tidak. Namun, yang ingin dicapai adalah pembuatan koneksi diatur di sana dengan batasan maksimum koneksi. yang saya tahu tidak ada konsep connection pool di php.","title":"2. Koneksi Database"},{"location":"perpustakaan/sekilas/#3-enum-php-8","text":"pada project ini saya menggunakan php versi 8.2 yang mana fitur enum sudah disediakan, disini jika kalian masih menggunakan versi php <8.1 yang tidak memiliki fitur enum. Yang kalian harus lakukan adalah mengganti schema database yang memiliki enum juga ke entity yang bersangkutan. Silahkan ganti dengan '1'=>'admin' misalnya. pada schema user misalnya kalian ganti ke 1 representasi admin dan 2 anggota lalu pergi ke 'app/entity/userEntity' pada createObject method ganti pembuatan attributes dengan value kalian. Dan Jangan lupa hapus file enum pada 'App/Entity/Enum'","title":"3. Enum PHP 8"}]}